<!--
  Aby dodać własny provider (UserStore) dla użytkowników należy stworzyć klasę dziedziczącą po interfejsie IIdentityUserStore lub po już zdefiniowanym providerze
  oraz analogicznie dodać do konfiguracji z własnymi providerami.
  Atrybuty zdefiniowanych providerów dostępne są poprzez odwołanie do UserStoreConfigurationSection.Current.Providers["NazwaProvidera"]["NazwaAtrybutu"]
-->
<!--
Przykład definicji kompozytowego providera dla VIP i AD z cacheowaniem
<userStoreProvider defaultProvider="CachedMembershipProvider">
  <providers>
    <add name="CachedMembershipProvider" .... defaultProvider="Composite" />
    <add name="Composite" .... order="VIP, AD" />
    <add name="VIP" ... />
    <add name="AD" ... />
  </providers>
</userStoreProvider>
-->
<!--
  defaultProvider = Nazwa wybranego providera (porównywana z atrybutem name z kolekcji <providers>)
  <providers> = kolekcja zdefiniowanych providerów gotowych do użycia
-->
<userStoreProvider defaultProvider="CachedMembershipProvider" userCacheDataTimeout="30">
  <providers>
    <!--
    Provider cacheujący - przechowuje dane o wyszukanych użytkownikach w pamięci przez określony czas
    defaultProvider = nazwa wybranego providera z którego informacje są cacheowane
    cacheTimeout = określa jak długo informacje mają być przechowywane
    -->
    <add name="CachedMembershipProvider" type="VSoft.Framework.Authorization.Providers.Cache.CacheUserStore, VSoft.Framework.Authorization" defaultProvider="Composite" cacheTimeout="5" />
    <!--
    Provider kompozytowy - potrafi korzystać z kilku przypisanych providerów jednocześnie, wyszukuje użytkowników w providerach w zdefiniowanej kolejności aż znajdzie takiego z zgodną nazwą użytkownika
    order = nazwy wybranych providerów oddzielone ",", użytkownicy są wyszukiwani w kolejności zdefiniowanej w tym atrybucie
    -->
    <add name="Composite" type="VSoft.Framework.Authorization.Providers.Composite.CompositeIdentityUserStore, VSoft.Framework.Authorization" order="{common.param.user_provider}" />
    <!--
    Provider ActiveDirectory - działa w obrębie AD
    connectionStringName - nazwa connectionString z konfiguracji do AD
    attributeMapUsername - nazwa atrybutu nazwy użytkownika w AD
    connectionUsername - nazwa użytkownika służąca do połączenia z AD
    connectionPassword - hasło służące do połączenia z AD
    -->
    <add name="AD" type="VSoft.Framework.Authorization.Providers.AD.ActiveDirectoryUserStore, VSoft.Framework.Authorization" connectionStringName="ADConnectionString" attributeMapUsername="sAMAccountName" connectionUsername="{common.param.provider_ad_user}" connectionPassword="{common.param.provider_ad_password}" />
    <!--
    Provider VIP - działa w obrębie zdefiniowanego VIP - poprzez połączenie z bazą danych VIP
    checkIfUserHasActiveProfile - czy sprawdzać czy użytkownik ma aktywny profil
    schemaName - schemat w bazie danych dla VIP
    connectionStringName - nazwa connectionString z konfiguracji do VIP
    applicationName - nazwa aplikacji/id aplikacji
    -->
    <add name="VIP" type="VSoft.Framework.Authorization.Providers.VIP.VipEntityUserStore, VSoft.Framework.Authorization" checkIfUserHasActiveProfile="false" schemaName="dbo" connectionStringName="VipConnectionString" applicationName="{common.id.provider_vip}" />
    <!--
    Provider VIP - działa w obrębie zdefiniowanego VIP - poprzez połączenie z bazą danych VIP
    authenticationEndpointName - nazwa punktu końcowego w VIP dla uwierzytelniania użytkownika podczas logowania
    accountEndpointName - nazwa punktu końcowego w VIP z operacjami pobierania użytkowników itp.
    applicationName - nazwa aplikacji/id aplikacji
    
    Uwaga! 
    W calu rozróżnienia Id aplikacji od nazwy apliakcji w przypadkach niejednoznacznych należy poprzedzić nazwę aplikacji znakiem #.
    Przypadki niejednoznaczne to:
    * nazwa aplikacji składająca się z samych cyfr np "007" - wpisz wówczas "#007"
    * nazwa aplikacji rozpoczynająca się od znaku #, np "#myapp" - wpisz wówczas "##myapp"
    -->
    <add name="VIPService" type="VSoft.Framework.Authorization.Providers.VipService.VipServiceUserStore, VSoft.Framework.Authorization" authenticationEndpointName="VipAuthenticateService" accountEndpointName="VipAccountService" applicationName="{common.id.provider_vip}" applicationEndpointName="VipApplicationServices" />
    <!--
    Provider MZU - działa w obrębie zdefiniowanego MZU - poprzez połączenie z usługami MZU
    authenticationEndpointName - nazwa punktu końcowego w MZU
    activeApplicationId - id aplikacji w MZU
    -->
    <add name="MZU" type="VSoft.Framework.Authorization.Providers.MZU.MzuUserStore, VSoft.Framework.Authorization" authenticationEndpointName="MzuService" activeApplicationId="{common.id.provider_mzu}" />
    <!--
    Provider Fake - provider umożliwiający zdefiniowanie własnych użytkowników
    users = lista zdefiniowanych użytkowników wraz z hasłem i rolami
    -->
    <!--Definicja użytkowników dla providera FAKE
        users="Id Uzytkownika:NazwaUzytkownika:Haslo:RoleOddzielonePrzecinkiem(,)"
        Jeżeli chcemy dodać więcej użytkowników oddzielamy ich średnikiem (;)
        np. users="Fake1:Admin::Admin;Fake2:TestUser:Vision123$:Regular" tworzy użytkownika "Admin" o id "Fake1 bez" hasła oraz z rolą "Admin"
        oraz użytkownika TestUser o id "Fake2" z hasłem Vision123$ i rolą Regular-->
    <add name="FAKE" type="VSoft.Framework.Authorization.Providers.Fake.FakeUserStore, VSoft.Framework.Authorization" users="FAKE1:TestAdmin::Admin;FAKE2:TestUser:Vision123$:Regular" />
  </providers>
</userStoreProvider>