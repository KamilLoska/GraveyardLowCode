<!--
  Aby dodać własny provider (RoleStore) dla ról należy stworzyć klasę dziedziczącą po interfejsie IIdentityRoleStore lub po już zdefiniowanym providerze
  oraz analogicznie dodać do konfiguracji z własnymi providerami.
  Atrybuty zdefiniowanych providerów dostępne są poprzez odwołanie do RoleStoreConfigurationSection.Current.Providers["NazwaProvidera"]["NazwaAtrybutu"]
-->
<!--
Przykład definicji kompozytowego providera dla VIP i AD z cacheowaniem
<userStoreProvider defaultProvider="CachedMembershipProvider">
  <providers>
    <add name="CachedMembershipProvider" .... defaultProvider="Composite" />
    <add name="Composite" .... order="VIP, AD" />
    <add name="VIP" ... />
    <add name="AD" ... />
  </providers>
</userStoreProvider>
-->
<!--
  defaultProvider = Nazwa wybranego providera (porównywana z atrybutem name z kolekcji <providers>)
  <providers> = kolekcja zdefiniowanych providerów gotowych do użycia
-->
<roleStoreProvider defaultProvider="CachedRoleProvider">
  <providers>
    <!--
    Provider cacheujący - przechowuje dane o wyszukanych rolach w pamięci przez określony czas
    defaultProvider = nazwa wybranego providera z którego informacje są cacheowane
    cacheTimeout = określa jak długo informacje mają być przechowywane
    -->
    <add name="CachedRoleProvider" type="VSoft.Framework.Authorization.Providers.Cache.CacheRoleStore, VSoft.Framework.Authorization" defaultProvider="Composite" cacheTimeout="5" />
    <!--
    Provider kompozytowy - potrafi korzystać z kilku przypisanych providerów jednocześnie, wyszukuje role w zdefiniowanych providerach
    order = nazwy wybranych providerów oddzielone ",", role są wyszukiwane i agregowane z wszystkich zdefiniowanych providerów
    -->
    <add name="Composite" type="VSoft.Framework.Authorization.Providers.Composite.CompositeIdentityRoleStore, VSoft.Framework.Authorization" order="{common.param.role_provider}" />
    <!--
    Provider ActiveDirectory - działa w obrębie AD
    connectionStringName - nazwa connectionString z konfiguracji do AD
    attributeMapUsername - nazwa atrybutu nazwy użytkownika w AD
    connectionUsername - nazwa użytkownika służąca do połączenia z AD
    connectionPassword - hasło służące do połączenia z AD
    crossDomain - czy połączenie odbywa się pomiędzy różnymi domenami
    recursive - wyszukiwanie rekursywne
    roleContainer - definicja kontenera ról w AD z którego będą pobierane role (zawężenie)
    -->
    <add name="AD" type="VSoft.Framework.Authorization.Providers.AD.ActiveDirectoryRoleStore, VSoft.Framework.Authorization" connectionStringName="ADConnectionString" attributeMapUsername="sAMAccountName" connectionUsername="{common.param.provider_ad_user}" connectionPassword="{common.param.provider_ad_password}" crossDomain="false" recursive="false" roleContainer="{common.param.provider_ad_container}" />
    <!--
    Provider VIP - działa w obrębie zdefiniowanego VIP - poprzez połączenie z bazą danych VIP
    applicationName - nazwa aplikacji/id aplikacji
    connectionStringName - nazwa connectionString z konfiguracji do VIP
    schemaName - schemat w bazie danych dla VIP
    -->
    <add name="VIP" type="VSoft.Framework.Authorization.Providers.VIP.VipEntityRoleStore, VSoft.Framework.Authorization" applicationName="{common.id.provider_vip}" connectionStringName="VipConnectionString" schemaName="dbo" />
    <!--
    Provider VIPService - działa w obrębie zdefiniowanego VIP - poprzez połączenie z zdefiniowanymi serwisami
    applicationName - nazwa aplikacji/id aplikacji
    roleEndpointName - Endpoint do serwisu ról
    applicationEndpointName - Endpoint do serwisu apliakcji
    
    Uwaga! 
    W calu rozróżnienia Id aplikacji od nazwy apliakcji w przypadkach niejednoznacznych należy poprzedzić nazwę aplikacji znakiem #.
    Przypadki niejednoznaczne to:
    * nazwa aplikacji składająca się z samych cyfr np "007" - wpisz wówczas "#007"
    * nazwa aplikacji rozpoczynająca się od znaku #, np "#myapp" - wpisz wówczas "##myapp"
    -->
    <add name="VIPService" type="VSoft.Framework.Authorization.Providers.VipService.VipServiceRoleStore, VSoft.Framework.Authorization" applicationName="{common.id.provider_vip}" roleEndpointName="VipRoleService" applicationEndpointName="VipApplicationServices" />
    <!--
    Provider MZU - działa w obrębie zdefiniowanego MZU - poprzez połączenie z usługami MZU
    authenticationEndpointName - nazwa punktu końcowego w MZU
    activeApplicationId - id aplikacji w MZU
    -->
    <add name="MZU" type="VSoft.Framework.Authorization.Providers.MZU.MzuRoleStore, VSoft.Framework.Authorization" authenticationEndpointName="MzuService" activeApplicationId="{common.id.provider_mzu}" />
    <!--
    Provider Fake - provider umożliwiający zdefiniowanie własnych ról
    roles = lista zdefiniowanych ról
    -->
    <!--Definicja ról dla providera FAKE
        roles="NazwaRoli"
        Jeżeli chcemy dodać więcej ról oddzielamy je średnikiem (;)
        np. roles="Admin;Regular" tworzy role "Admin" oraz "Regular"-->
    <add name="FAKE" type="VSoft.Framework.Authorization.Providers.Fake.FakeRoleStore, VSoft.Framework.Authorization" roles="Admin;Regular" />
  </providers>
</roleStoreProvider>